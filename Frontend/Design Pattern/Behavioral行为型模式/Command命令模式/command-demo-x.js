/**
 * 命令模式
 *
 * 定义：封装方法调用
 * 目的：
 * 将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作。
 * 解耦提高在对象之间传递的操作的模块化程度。
 * 
 * 命令模式是一种封装方法调用的方式。命令模式与普通函数所有不同。它可以用来对方法调用进行参数化处理和传送，经这样处理过的方法调用可以在任何需要的时候执行。它也可以用来消除调用操作的对象和实现操作对象之间的耦合，这位各种具体的类的更换带来了极大的灵活性。这种模式可以用在许多不同场合，不过它在创建用户界面这一方面非常有用，特别是在需要不受限的（unlimited）取消（undo）操作的时候，它还可以用来替代回调函数，因为它能够
 * 
 * 
 * 命令模式的关键
 * 命令模式的关键之处就是把请求封装成对象，也就是命令对象，并定义了统一的执行操作的接口，这个命令对象可以被存储，转发，记录，处理，撤销等，整个命令模式都是围绕这个对象在进行。
 *
 * 
 * 在实际开发过程中，Client和Invoker可以融合在一起
 *

/*
 使用同样接口的所有命令对象都可以被同等对待，并且可以随意互换，这是命令模式的魅力之一。

 --> FIXME: 有其他模式，都是基于interface的，方便统一、随意互换。
 
 */

/*
 用于崩溃恢复的命令日志

 命令日志的一个有趣的用途是在程序崩溃后恢复其状态。在前面这个示例中，可以用XHR把经过序列化处理的命令记录到服务器上。用户下次访问该网页的时候，系统可以找出这些命令并用其将画布上的图案精确恢复到浏览器关闭时的状态。这可以替用户把应用程序状态保管下来，以便其撤销先前的任何一次浏览器会话中执行的操作。如果应用系统比较复杂，那么这种类型的命令日志会很大的存储需求。为此你可以提供一个按钮，用户可以用它提交到当时为止的所有操作，从而清空命令栈。
 */

/*
 命令模式的适用场合

 1.如果需要抽象出需要执行的动作，并参数化这些对象，可以选用命令模式。将这些需要执行的动作抽象成为命令，然后实现命令的参数化配置。
 2.如果需要在不同的时刻指定，排列和执行请求。将这些请求封装成为命令对象，然后实现请求队列化。
 3.如果需要支持取消操作，可以选用，通过管理命令对象，能很容易的实现命令的恢复和重做功能。
 4.如果需要支持当系统奔溃时，能将系统的操作功能重新执行一遍时。将这些操作功能的请求封装成命令对象，然后实现日志命令，就可以在系统恢复以后，通过日志获取命令列表，从而重新执行一遍功能。
 5.在需要事务的系统中，命令模式提供了对事务进行建模的方法。


 命令模式之利

 1.更松散的耦合
 命令模式使得发起命令的对象--客户端，和具体实现命令的对象--接收者对象完全解耦，也就是说发起命令的对象完全不知道具体实现对象是谁，也不知道如何实现。
 2.更动态的控制
 命令模式把请求封装起来，可以动态地对它进行参数化，队列化和日志化等操作，从而使得系统更灵活。
 4.更好的扩展性：很容易地组合符合命令，也就是宏命令。
 


 命令模式之弊

 如果一个命令对象只包装了一个方法调用，而且其唯一目的就是这层对象包装的话，那么这种做法是一种浪费。如果你不需要命令模式给予的任何额外特性，也不需要具有一致接口的类所带来的模块性，那么直接使用方法引用而不是完整的命令对象也许更恰当。命令对象也会增加代码调试的难度，因为在应用了命令模式之后原有的方法之上又多了一层可能出错的代码。


 相关模式

 命令模式和组合模式
 可以组合使用
 宏命令的功能就可以使用组合模式。

 命令模式和备忘录模式
 可以组合使用
 在实现可撤销功能时，如果采用保存命令执行前的状态，撤销的时候就把状态恢复，就可以考虑使用备忘录模式。

 命令模式和模板方法模式
 命令模式可以作为模板方法的一种替代模式，也就是说命令模式可以模仿实现模板方法模式的功能。
 */


 /**
  * 定义
  * 本质（设计原则、分类）
  * 解决了什么问题
  * 引入了什么问题
  * 场景
  * 优点
  * 缺点
  */